//file: p2p_msg.jsuser

//主要模块：界面、Layout布局系统、ECC 加密、sha 摘要、socket 网络、TCP 服务器、upnp 端口映射（内网必须）。

"use strict";
require("base");
require("wnd");
var jscrypt = Api.loadModule("../../bin/jscrypt.dll");
if(!jscrypt) throw "没有找到 jscrypt.dll";
load("../crypt.jsuser");

var port = 37129;	//外网端口
var remote_port,my_port;
var editSendAddr,editMyAddr,editMyText,editInf,butSend,butConnect;
var pubkey,http,remote_pk,remote_ip,sendSocket,server,ecc;
Class(function main(){
	initUI();
	startMsgLoop();
},true);
Class(function sendMsg(){
	var str = editMyText.text;
	if(str.length==0){
		logInf("要发送的数据为空");
		return;
	}
	var data = new CMemory();
	var dlen = data.setString(str,0,65001);
	var enc = ecc.encrypt(data.handle(),dlen);
	var len = sendSocket.sendData.copyFrom(enc.handle(),enc.length);
	logInf(enc.length+","+dlen+","+len);
	sendSocket.send(len);
},true);
function connectRemote(){
	if(!sendSocket){
		sendSocket = new CSocket();
		sendSocket.onConnect = function(cnt,code){
			logInf("连接地址 "+this.getRemoteIp()+":"+this.getRemotePort()+" 成功: "+cnt);
			if(!code) butSend.disabled = false;
		}
		sendSocket.onSend = function(len,error){
		logInf("send data len = "+len + ",error = " + error);
			if(error==0){
				logInf("我向 "+remote_ip +" 发送了消息, length = "+len);
			}
		}
		/*sendSocket.onRecv = function(len,error){
			if(error==0){
				logInf("收到 "+remote_ip +" 发送的消息："+this.recvData.getString(0,len,65001));
			}else{
				logInf(remote_ip +" 已经断开");
				butSend.disabled = true;
			}
		}*/
	}
	if(!sendSocket.connect(remote_ip,remote_port)){
		logInf("已经连接到 "+remote_ip+"，重新启动程序，或者对方断开连接才能发起新连接。");
	}
}
function initConnect(){
	butConnect.onCommand = function(){
		var addr = editSendAddr.text;
		if(http.onRequest){
			http.onRequestMemory = function(mem,header){
				if(mem.getNumber(2)==0x32f88ad0){
					if(!remote_pk){
						remote_pk = new CMemory();
					}
					remote_pk.copyFrom(mem.handle()+4,136);
					remote_port = mem.getNumber(2,false,140);
					logInf("remote_port:"+remote_port);
					var str = mem.getString(144);
					var a = str.split(",");
					logInf("远程 ip："+a[0]);
					remote_ip = a[0];
					logInf("最近访问："+a[1]);
					if(!ecc.setPublicKey(remote_pk)){
						logInf("远端公钥设置失败，可能是一个无效的公钥");
					}else{
						connectRemote();
					}
				}else{
					logInf(mem.getString());
				}
			}
			http.parseUrl("http://jsuser.sinaapp.com/p2p_msg_get.html");
			http.onRequest = undefined;
		}
		var data = new CMemory();
		data.fromBase64(addr);
		if(data.length==32){
			http.request(data,data.length,true);
		}else{
			logInf("非法地址");
		}
		data.dispose();
	}
}
function logInf(inf){
	var date = new Date();
	var t = date.getHours() + ":"+date.getMinutes()+":"+date.getSeconds()+"  ";
	editInf.text += "\r\n" + t + inf;
}
function initServer(){
	http = new CHttpRequest();
    http.parseUrl("http://jsuser.sinaapp.com/p2p_msg.html");
	http.method = "POST";
	http.code = 65001;//utf-8
	http.header.push("Content-Type: text/xml");
    http.onRequest = function(html,head){
        if(!html){
			logInf("网络错误，无法连接服务器。");
		}else{
			try{
				var rst = JSON.parse(html);
				if(rst.result){
					logInf("成功连接至服务器, 我的外网 ip: "+rst.ip);
				}else{
					logInf("http.onRequest,"+rst.error);
				}
			}catch(e){
				logInf(html);
			}
		}
		butConnect.disabled = false;
    }
	var submit = new CMemory();
	var addr = sha(pubkey,undefined,32);
	var offset = 0;
	submit.copyFrom(addr.handle(),addr.length,offset);
	offset += addr.length;
	addr.dispose();
	submit.copyFrom(pubkey.handle(),pubkey.length,offset);
	offset += pubkey.length;
	submit.setNumber(my_port,2,offset);
	
    if(http.request(submit,172,true));
	submit.dispose();
	
	server = new CTcpServer();

	server.onAccept = function(client){
		client.remote_ip = client.getRemoteIp();
		logInf("接受来自 "+client.remote_ip+" 的连接");
		client.onRecv = function(len,error){
			if(error){
				logInf("来自 "+client.remote_ip+" 的连接已经断开");
				client.dispose();
			}else{
				var dec = ecc.decrypt(client.recvData,len);
				if(!dec){
					logInf("来自 "+client.remote_ip+" 的数据有误: length = "+len);
				}else{
					logInf("来自 "+client.remote_ip+" 的消息: "+dec.getString(0,dec.length,65001));
				}
			}
		}
		client.recv();
	}

	if(server.startup(my_port)){
		logInf("启动接收服务成功，端口："+my_port);
	}else{
		logInf("启动接收服务失败，端口："+my_port);
	}
}
Class(function initUpnp(){
	var upnp = new CUpnp();
	if(!upnp.create()){
		logInf("初始化端口映射失败，如果你不在内网，无需做端口映射。");
		return false;
	}
	var local_ip = upnp.getIp();
	var a = local_ip.split(".");
	my_port = port;
	if(a[3]!=undefined){
		my_port += (0xff&a[3]);
	}
	if(!upnp.set(my_port,false,false,my_port,"p2p_msg")){
		logInf("映射端口 "+my_port+" 失败");
		return false;
	}
	return true;
},true);
function initUI(){
	editSendAddr = new CEdit();
	var labAddr = new CLabel();
	labAddr.text = "接收地址:";
	editMyAddr = new CEdit();
	editMyText = new CEdit();
	editMyText.setMultiLine(true);
	var labMy = new CLabel();
	labMy.text = "我的地址:";
	editInf = new CEdit();
	editInf.setMultiLine(true);
	butSend = new CButton();
	butSend.text = "发送";
	butConnect = new CButton();
	butConnect.text = "连接";
	butConnect.disabled = true;
	butSend.onCommand = function(){
		sendMsg();
	}
	
	var toplay = new Layout();
	toplay.param.margin.setValue(10,10,10,10);
	initLayout(toplay,editSendAddr,labAddr,labMy,editMyAddr,editMyText,editInf,butSend,butConnect);

	var frame = new CFrame();
	frame.text = "p2p message —— jsuser 1.0";
	frame.setLayout(toplay);
	frame.setRemPos("main_wnd");
	var appIcon = new CIcon();
	appIcon.load("p2p_msg.ico");
	
	ecc = new CEcc(true);
	var keyfile = "p2p_msg.ecc";
	try{
		ecc.loadKey(keyfile);
	}catch(msg){
		ecc.createKey();
		ecc.saveKey(keyfile);
	}
	pubkey = ecc.getPublicKey();
	var hash = sha(pubkey,0,32);
	editMyAddr.text = hash.toBase64();
	hash.dispose();

	frame.onCreate = function(){
		frame.setIcon(appIcon);
		toplay.refresh(frame.handle());
		editMyAddr.readOnly = true;
		editInf.readOnly = true;
		butSend.disabled = true;
		logInf("这是一个p2p测试程序，窗口下面的编辑框是你的地址，把这个地址告诉你的好友，或者把好友的地址复制到上面的地址框，然后点连接，如果对方也开着本程序，连接成功后，就可以向对方发送消息。这些消息是经过椭圆不对称加密算法加密的，只有你自己能解密。你可以测试向自己的地址发送消息。");
		initUpnp();
		initServer();
		initConnect();
	}
	frame.onClose = function(){
		server.shutdown();
		if(sendSocket) sendSocket.close();
	}

	frame.create();
}
function initLayout(toplay,editSendAddr,labAddr,labMy,editMyAddr,editMyText,editInf,butSend,butConnect){
	var lay1 = toplay.add();
	lay1.param.weight = 0;
	lay1.param.length = 20;
	lay1.param.margin.bottom = 10;
	{
		lay1.param.setHorizontal();
		var layLabAddr = lay1.add();
		{
			layLabAddr.param.margin.top = 3;
			layLabAddr.param.weight = 0;
			layLabAddr.param.length = 80;
			layLabAddr.control = labAddr;
		}
		var layEditSend = lay1.add();
		{
			layEditSend.control = editSendAddr;
		}
		var layConnect = lay1.add();
		{
			layConnect.param.weight = 0;
			layConnect.param.length = 70;
			layConnect.param.margin.setValue(20,-1,0,-1);
			layConnect.control = butConnect;
		}
	}
	var lay2 = toplay.add();
	{
		lay2.control = editInf;
	}
	var lay25 = toplay.add();
	{
		lay25.param.weight = 0;
		lay25.param.length = 80;
		lay25.param.margin.top = 10;
		lay25.control = editMyText;
	}
	var lay3 = toplay.add();
	lay3.param.weight = 0;
	lay3.param.length = 30;
	lay3.param.margin.top = 10;	
	lay3.param.setHorizontal();
	{
		var layLeft = lay3.add();
		var layRight = lay3.add();
		layRight.param.weight = 0;
		layRight.param.length = 80;
		layRight.control = butSend;
	}

	var lay4 = toplay.add();
	lay4.param.weight = 0;
	lay4.param.length = 20;
	lay4.param.margin.top = 10;	
	lay4.param.setHorizontal();
	{
		var layLabAddr = lay4.add();
		{
			layLabAddr.param.margin.top = 3;
			layLabAddr.param.weight = 0;
			layLabAddr.param.length = 80;
			layLabAddr.control = labMy;
		}
		var layEditSend = lay4.add();
		{
			layEditSend.control = editMyAddr;
		}
	}
}
main();